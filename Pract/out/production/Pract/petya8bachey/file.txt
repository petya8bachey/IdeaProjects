наследование
Наследование— описание нового класса на основе уже существующего с частично или полностью заимствующейся функциональностью
В  Java наследование единичное (но есть интерфейсы)
у любого класса есть только один непосредственный предок
граф наследования представляет собой дерево
все объекты прямо или косвенно унаследованы от класса Object
public class MyClass	 extends MyBaseClass
	implements MyInterface1, MyInterface2
{
	. . . . .
}
(instanceof, Переопределение(нельзя сужать (ужесточать)), default)
очереди
Интерфейс Queue
Интерфейс Queue описывает очередь. Элементы могут добавляться в очередь только с одного конца, а извлекаться с другого (аналогично очереди в магазине).
Интерфейс Queue так же унаследован от интерфейса Collection.
Специфические для очереди методы:
poll() – возвращает первый элемент и удаляет его из очереди.
peek() – возвращает первый элемент очереди, не удаляя его.
offer(Object obj) – добавляет в конец очереди новый элемент и возвращает true, если вставка удалась.
многопоточность
Обычно в многозадачной операционной системе (ОС) выделяют такие объекты, как процессы и потоки.
Процесс (process) - это объект, который создается ОС при запуске приложения.
Процессу выделяется отдельное адресное пространство, это пространство физически недоступно для других процессов.
Процесс может работать с файлами или с каналами связи локальной или глобальной сети.
Для каждого процесса ОС создает один главный поток (thread), который является потоком выполняющихся по очереди команд центрального процессора.
При необходимости главный поток может создавать другие потоки, пользуясь для этого программным интерфейсом ОС.
Все потоки, созданные процессом, выполняются в адресном пространстве этого процесса и имеют доступ к ресурсам процесса.
Для создания многозадачных приложений Java необходимо воспользоваться классом java.lang.Thread. В этом классе определены все методы, необходимые для создания потоков, управления их состоянием и синхронизации.

Способ 1

Создать объект класса Thread, передав ему в конструкторе нечто, реализующее интерфейс Runnable.
Этот интерфейс содержит метод run(), который будет выполняться в новом потоке.
Поток закончит выполнение, когда завершится его метод run().
public class Program			//Класс с методом main()
{
	static SomeThing mThing;	//mThing - объект класса, реализующего интерфейс Runnable

	public static void main(String[] args)
	{
		mThing = new SomeThing();

		Thread myThready = new Thread(mThing);	//Создание потока "myThready"
		myThready.start();				//Запуск потока

		System.out.println("Главный поток завершён...");
	}
}

Создать потомка класса Thread и переопределить его метод run():
class AffableThread extends Thread
{
	@Override
	public void run()	//Этот метод будет выполнен в побочном потоке
	{
		System.out.println("Привет из побочного потока!");
	}
}

public class Program
{
	static AffableThread mSecondThread;

	public static void main(String[] args)
	{
		mSecondThread = new AffableThread();	//Создание потока
		mSecondThread.start();					//Запуск потока

		System.out.println("Главный поток завершён...");
	}
}